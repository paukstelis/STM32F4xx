# This is the configuration file for PlatformIO, a cross-platform tool and IDE
# to build and develop software for embedded systems.
#
# To build the firmware with PlatformIO, install PlatformIO Core (CLI, no GUI):
# - https://docs.platformio.org/en/latest//core/installation.html
#
# For documentation on this file, see:
# - https://docs.platformio.org/en/latest/projectconf/index.html
#
# To add support for another STM32F1xx board, add a new [env:name..] section
# with the appropriate `board` and (optionally) `board_build.ldscript`.
# For a list of supported hardware, see:
# - https://docs.platformio.org/en/latest/platforms/ststm32.html
#
# To add support for additional grblHAL plugins or drivers, make the necessary
# changes to the common.build_flags, common.lib_deps and common.lib_extra_dirs
# below.
#
# By default this file sets the preprocessor directive `OVERRIDE_MY_MACHINE`
# to ignore all settings in `Inc/my_machine.h`.  Instead, you should edit this
# file and add the necessary directives (e.g. `-D FOOBAR_ENABLE`) to either
# `common.build_flags` or the environment specific `build_flags`.
#
# Typical command line usage:
#
#    # Build firmware for all defined environments
#    pio run
#    # Build only for specific environments with the -e option
#    pio run -e BTT_SKR_MINI_E3_V20 -e BTT_SKR_MINI_E3_V20_USB
#    # List the freshly built firmware ELF (.elf) and binary (.bin) files:
#    ls -l .pio/build/*/firmware.*
#    # If the target supports uploading (via `upload_protocol`):
#    pio run -e bluepill_f103c8_128k -t upload
#    # Clean up build related resources
#    pio run -t clean
#

#
# NOTE: PlatformIO support is provided by the community and platformio.ini is
# not maintained or tested by the repo owner.
# Please submit a PR with bug fixes and enhancments.
#

[platformio]
include_dir = Inc
src_dir = Src

[common]
build_flags =
  -I .
  -I boards
  -I FatFs
  -I FatFs/STM
  -I Drivers/FATFS/Target
  -I Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc
  -I Middlewares/ST/STM32_USB_Device_Library/Core/Inc
  -I USB_DEVICE/App
  -I USB_DEVICE/Target
  -D _USE_IOCTL=1
  -D _USE_WRITE=1
  -D _VOLUMES=1 
  -Wl,-u,_printf_float
  -Wl,-u,_scanf_float
  # Ignore all settings in Inc/my_machine.h (and instead use the below build flags)
  -D OVERRIDE_MY_MACHINE
  # Uncomment to enable debug builds
  #-D DEBUG
  # Uncomment to enable support for keypad
  #-D KEYPAD_ENABLE=1
  # Uncomment to enable support for odometer
  #-D ODOMETER_ENABLE=1
  # Uncomment to enable support for running G-code from the microSD card
  # You also need to uncomment FatFS and sdcard in lib_deps (see below)
  #-D SDCARD_ENABLE=1
  # Set to 1 or 2 (see Inc/my_machine.h)
  #-D SPINDLE_HUANYANG=1
lib_deps =
  boards
  bluetooth
  grbl
  keypad
  laser
  motors
  trinamic
  odometer
  fans
  spindle
  embroidery
  Drivers/FATFS/App
  Drivers/FATFS/Target
  # USB serial support
  Middlewares/ST/STM32_USB_Device_Library/Core
  Middlewares/ST/STM32_USB_Device_Library/Class
  USB_DEVICE/App
  USB_DEVICE/Target
# To enable support for SD card, you must grab a copy FatFS:
#   curl -O http://elm-chan.org/fsw/ff/arc/ff14b.zip
#   unzip ff14b.zip 'source/*'
#   mv source/* FatFS
#   rm -fr ff14b.zip source FatFS/diskio.c
# Next, apply the changes outlined in FatFS/README.md and then
# uncomment `FatFS` and `sdcard` below.
  FatFs
  sdcard
  # USB serial support
#  Core
#  Class
#  App
#  Target
lib_extra_dirs =
  .
  boards
  FatFs
  Middlewares/ST/STM32_USB_Device_Library
  USB_DEVICE

[eth_networking]
build_flags =
  -I lwip/src/include
  -I networking/wiznet
lib_deps =
   lwip
   networking
lib_extra_dirs =


[env]
platform = ststm32
platform_packages = framework-stm32cubef4 @ ~1.26.2
framework = stm32cube
# Do not produce .a files for lib deps (which would prevent them from overriding weak symbols)
lib_archive = no
lib_ldf_mode = off

[env:btt_skr_pro_1_1]
# Untested and might not boot.  Please report issues at:
# https://github.com/grblHAL/STM32F4xx/issues
board = genericSTM32F407VGT6
board_build.ldscript = STM32F407VGTX_BL32K_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_BTT_SKR_PRO_1_1=
  # 8MHz crystal
  -D HSE_VALUE=8000000
  -D HAS_BOOTLOADER
  -D USB_SERIAL_CDC=1
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}
# Upload is not supported for this board since BOOT0 is tied to GND.
# With the default boot loader, you must deploy new firmware by copying
# .pio/build/<env name>/firmware.bin (produced by `pio run`) to the SD card.

[env:btt_skr_2_tmc2130]
# Untested and might not boot.  Please report issues at:
# https://github.com/grblHAL/STM32F4xx/issues
board = genericSTM32F407VGT6
board_build.ldscript = STM32F407VGTX_BL32K_FLASH.ld
build_flags = ${common.build_flags}
  -D WEB_BUILD
  -D BOARD_BTT_SKR_20
  -D USE_HAL_DRIVER
  -D STM32F407xx
  -D HSE_VALUE=8000000
  -D USB_SERIAL_CDC=1
  -D PROBE_ENABLE=1
  -D TRINAMIC_ENABLE=2130
  -D TRINAMIC_UART_ENABLE=0
  -D BLUETOOTH_ENABLE=0
  -D NETWORKING_ENABLE=0
  -D ESTOP_ENABLE=1
  -D SPINDLE0_ENABLE=11
  -D N_SPINDLE=1
lib_deps = ${common.lib_deps}
  eeprom

lib_extra_dirs = ${common.lib_extra_dirs}

# Upload is not supported for this board since BOOT0 is tied to GND.
# With the default boot loader, you must deploy new firmware by copying
# .pio/build/<env name>/firmware.bin (produced by `pio run`) to the SD card.

[env:btt_skr_2_tmc5160]
# Untested and might not boot.  Please report issues at:
# https://github.com/grblHAL/STM32F4xx/issues
board = genericSTM32F407VGT6
board_build.ldscript = STM32F407VGTX_BL32K_FLASH.ld
build_flags = ${common.build_flags}
  -D WEB_BUILD
  -D BOARD_BTT_SKR_20
  -D USE_HAL_DRIVER
  -D STM32F407xx
  -D HSE_VALUE=8000000
  -D USB_SERIAL_CDC=1
  -D PROBE_ENABLE=1
  -D TRINAMIC_ENABLE=5160
  -D TRINAMIC_UART_ENABLE=0
  -D BLUETOOTH_ENABLE=0
  -D NETWORKING_ENABLE=0
  -D ESTOP_ENABLE=1
  -D SPINDLE0_ENABLE=11
  -D N_SPINDLE=1

lib_deps = ${common.lib_deps}
  eeprom

lib_extra_dirs = ${common.lib_extra_dirs}

# Upload is not supported for this board since BOOT0 is tied to GND.
# With the default boot loader, you must deploy new firmware by copying
# .pio/build/<env name>/firmware.bin (produced by `pio run`) to the SD card.

[env:btt_skr_2_tmc2209]
# Untested and might not boot.  Please report issues at:
# https://github.com/grblHAL/STM32F4xx/issues
board = genericSTM32F407VGT6
board_build.ldscript = STM32F407VGTX_BL32K_FLASH.ld
build_flags = ${common.build_flags}
  -D WEB_BUILD
  -D BOARD_BTT_SKR_20
  -D USE_HAL_DRIVER
  -D STM32F407xx
  -D HSE_VALUE=8000000
  -D USB_SERIAL_CDC=1
  -D PROBE_ENABLE=1
  -D TRINAMIC_ENABLE=2209
  -D TRINAMIC_UART_ENABLE=2
  -D BLUETOOTH_ENABLE=0
  -D NETWORKING_ENABLE=0
  -D ESTOP_ENABLE=1
  -D SPINDLE0_ENABLE=11
  -D N_SPINDLE=1
lib_deps = ${common.lib_deps}
  eeprom

lib_extra_dirs = ${common.lib_extra_dirs}

# Upload is not supported for this board since BOOT0 is tied to GND.
# With the default boot loader, you must deploy new firmware by copying
# .pio/build/<env name>/firmware.bin (produced by `pio run`) to the SD card.

[env:fly_cdy_v3_tmc2209]
# Untested and might not boot.  Please report issues at:
# https://github.com/grblHAL/STM32F4xx/issues
board = genericSTM32F407VGT6
board_build.ldscript = STM32F407VGTX_BL32K_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_FLY_CDY_V3=
  -D HSE_VALUE=8000000
  -D USB_SERIAL_CDC=1
  # Boot loader offset (32K)
  -D VECT_TAB_OFFSET=0x8000
  -D N_AXIS=5
  -D TRINAMIC_ENABLE=2209
  -D SPINDLE0_ENABLE=11
  #-D SPINDLE1_ENABLE=19
  #-D N_SPINDLE=2
  #-D N_SYS_SPINDLE=1
  -D ESTOP_ENABLE=0
  -D SAFETY_DOOR_ENABLE=0
  -D MOTOR_FAULT_ENABLE=0
  -D ENABLE_BACKLASH_COMPENSATION=1
  #-D SPINDLE_SYNC_ENABLE=1
  -D DEFAULT_CONTROL_SIGNALS_INVERT_MASK=SIGNALS_BITMASK
  -D DEFAULT_LIMIT_SIGNALS_INVERT_MASK=16
  -D DEFAULT_PROBE_SIGNAL_INVERT=1
  -D DEFAULT_DIR_SIGNALS_INVERT_MASK=3
  #-D DEFAULT_DIR_SIGNALS_INVERT_MASK=28
  -D DEFAULT_STEPPER_DEENERGIZE_MASK=31
  #-D DEFAULT_AXIS_ROTATIONAL_MASK=56
  -D DEFAULT_AXIS_ROTARY_WRAP_MASK=24
  -D DEFAULT_X_STEPS_PER_MM=200.0
  -D DEFAULT_Z_STEPS_PER_MM=200.0
  -D DEFAULT_A_STEPS_PER_MM=35.55
  -D DEFAULT_B_STEPS_PER_MM=35.55
  -D DEFAULT_X_ACCELERATION=100.0
  -D DEFAULT_Z_ACCELERATION=100.0
  -D DEFAULT_A_ACCELERATION=100.0
  -D DEFAULT_B_ACCELERATION=100.0
  -D DEFAULT_X_MAX_RATE=1200.0
  -D DEFAULT_Z_MAX_RATE=1200.0
  -D DEFAULT_A_MAX_RATE=10800.0
  -D DEFAULT_B_MAX_RATE=1200.0
  -D DEFAULT_X_CURRENT=1768
  -D DEFAULT_Z_CURRENT=1768
  -D DEFAULT_A_CURRENT=1768
  -D DEFAULT_B_CURRENT=1768
  -D TRINAMIC_DEFAULT_MICROSTEPS=8
  #-D TRINAMIC_DRIVER_MASK=61
  -D DEFAULT_REPORT_LINE_NUMBERS=0
  -D DEFAULT_REPORT_WORK_COORD_OFFSET=0
  -D DEFAULT_REPORT_MACHINE_POSITION=0
  #-D DEFAULT_REPORT_OVERRIDES=0
  -D TRINAMIC_DRIVER_MASK=29
  -D DEFAULT_AUTOREPORT_INTERVAL=500
  
lib_deps = ${common.lib_deps}
  eeprom
  trinamic
  plugins
  spindle
lib_extra_dirs = ${common.lib_extra_dirs}

[env:fly_cdy_v3_exp]
# Untested and might not boot.  Please report issues at:
# https://github.com/grblHAL/STM32F4xx/issues
board = genericSTM32F407VGT6
board_build.ldscript = STM32F407VGTX_BL32K_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_FLY_CDY_V3=
  -D HSE_VALUE=8000000
  -D USB_SERIAL_CDC=1
  # Boot loader offset (32K)
  -D VECT_TAB_OFFSET=0x8000
  -D N_AXIS=6
  -D TRINAMIC_ENABLE=2209
  -D SPINDLE0_ENABLE=11
  -D SPINDLE1_ENABLE=19
  -D N_SPINDLE=2
  -D N_SYS_SPINDLE=1
  -D SPINDLE_SYNC_ENABLE=1
  -D SPINDLE_ENCODER_ENABLE=0
  -D ESTOP_ENABLE=0
  -D SAFETY_DOOR_ENABLE=0
  -D MOTOR_FAULT_ENABLE=0
  -D ENABLE_BACKLASH_COMPENSATION=1
  -D DEFAULT_CONTROL_SIGNALS_INVERT_MASK=SIGNALS_BITMASK
  -D DEFAULT_LIMIT_SIGNALS_INVERT_MASK=16
  -D DEFAULT_PROBE_SIGNAL_INVERT=1
  #-D DEFAULT_DIR_SIGNALS_INVERT_MASK=3
  -D DEFAULT_DIR_SIGNALS_INVERT_MASK=28
  -D DEFAULT_STEPPER_DEENERGIZE_MASK=31
  -D DEFAULT_AXIS_ROTATIONAL_MASK=56
  #-D DEFAULT_AXIS_ROTARY_WRAP_MASK=24
  -D DEFAULT_X_STEPS_PER_MM=200.0
  -D DEFAULT_Z_STEPS_PER_MM=200.0
  -D DEFAULT_A_STEPS_PER_MM=35.55
  -D DEFAULT_B_STEPS_PER_MM=35.55
  -D DEFAULT_C_STEPS_PER_MM=35.55
  -D DEFAULT_X_ACCELERATION=100.0
  -D DEFAULT_Z_ACCELERATION=100.0
  -D DEFAULT_A_ACCELERATION=100.0
  -D DEFAULT_B_ACCELERATION=100.0
  -D DEFAULT_C_ACCELERATION=100.0
  -D DEFAULT_X_MAX_RATE=1200.0
  -D DEFAULT_Z_MAX_RATE=1200.0
  -D DEFAULT_A_MAX_RATE=10800.0
  -D DEFAULT_B_MAX_RATE=1200.0
  -D DEFAULT_C_MAX_RATE=1200.0
  -D DEFAULT_X_CURRENT=1768
  -D DEFAULT_Z_CURRENT=1768
  -D DEFAULT_A_CURRENT=1768
  -D DEFAULT_B_CURRENT=1768
  -D DEFAULT_C_CURRENT=1768
  -D DEFAULT_REPORT_LINE_NUMBERS=0
  -D DEFAULT_REPORT_WORK_COORD_OFFSET=0
  -D DEFAULT_REPORT_MACHINE_POSITION=0
  -D TRINAMIC_DEFAULT_MICROSTEPS=8
  -D TRINAMIC_DRIVER_MASK=61
  #-D TRINAMIC_DRIVER_MASK=37
  -D DEFAULT_AUTOREPORT_INTERVAL=500
  
lib_deps = ${common.lib_deps}
  eeprom
  trinamic
  plugins
  spindle
lib_extra_dirs = ${common.lib_extra_dirs}

[env:fysetc_s6]
board = fysetc_s6
board_build.ldscript = STM32F446RETX_NO_BL_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_FYSETC_S6=
  # 12MHz crystal
  -D HSE_VALUE=12000000
  -D USB_SERIAL_CDC=1
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}
upload_protocol = dfu 

[env:fysetc_s6_tmc2209]
board = fysetc_s6
board_build.ldscript = STM32F446RETX_NO_BL_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_FYSETC_S6=
  # 12MHz crystal
  -D HSE_VALUE=12000000
  -D USB_SERIAL_CDC=1
  # TMC2209 stepper drivers
  -D TRINAMIC_ENABLE=2209
lib_deps = ${common.lib_deps}
  eeprom
  trinamic
lib_extra_dirs = ${common.lib_extra_dirs}
upload_protocol = dfu 

[env:nucleo_f411re_morpho_cnc]
board = nucleo_f411re
board_build.ldscript = STM32F411CEUX_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_MORPHO_CNC=
  -D NUCLEO_F411=
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
upload_protocol = stlink

[env:nucleo_f411re_protoneer]
board = nucleo_f411re
board_build.ldscript = STM32F411CEUX_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_PROTONEER_3XX=
  -D NUCLEO_F411=
  # Uncomment to enable Spindle PWM output on the SpinDir pin
  #-D PROTONEER_SPINDLE_PWM=
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
upload_protocol = stlink

[env:nucleo_f446re_morpho_cnc]
board = nucleo_f446re
board_build.ldscript = STM32F446RETX_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_MORPHO_CNC=
  -D NUCLEO_F446=
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
upload_protocol = stlink

[env:nucleo_f446re_generic_uno]
board = nucleo_f446re
board_build.ldscript = STM32F446RETX_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_GENERIC_UNO=
  -D NUCLEO_F446=
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
upload_protocol = stlink

[env:nucleo_f446re_protoneer]
board = nucleo_f446re
board_build.ldscript = STM32F446RETX_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_PROTONEER_3XX=
  -D NUCLEO_F446=
  # Uncomment to enable Spindle PWM output on the SpinDir pin
  #-D PROTONEER_SPINDLE_PWM=
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
upload_protocol = stlink

[env:blackpill_f411ce]
board = blackpill_f411ce
board_build.ldscript = STM32F411CEUX_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_BLACKPILL=
  -D USB_SERIAL_CDC=1 
  # Uncomment to enable Spindle PWM output on the SpinDir pin
  #-D PROTONEER_SPINDLE_PWM=
lib_deps = ${common.lib_deps}
lib_extra_dirs = ${common.lib_extra_dirs}
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
; change MCU frequency
upload_protocol = dfu 

[env:blackpill_f401cc_uni]
board = blackpill_f401cc
board_build.ldscript = STM32F401CCUX_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D BOARD_STM32F401_UNI=
  -D USB_SERIAL_CDC=1
lib_deps = ${common.lib_deps}
lib_extra_dirs = ${common.lib_extra_dirs}
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
; change MCU frequency
upload_protocol = dfu 

[env:Halcyon_v1]
board                = genericSTM32F401RC
board_build.ldscript = STM32F401RC_FLASH.ld
build_flags          = ${common.build_flags}
  # See Inc/my_machine.h for options
                     -D BOARD_HALCYON_V1=
                     -D HSE_VALUE=8000000
                     -D USB_SERIAL_CDC=1
                     -D SDCARD_ENABLE=1
                     -D _VOLUMES=1
                     -D KEYPAD_ENABLE=1
                     -D EEPROM_IS_FRAM=1
lib_deps             = ${common.lib_deps}
					eeprom
					trinamic
					FatFs
					sdcard
lib_extra_dirs       = ${common.lib_extra_dirs}

[env:Halcyon_v1_dfu]
extends              = env:Halcyon_v1
upload_protocol      = dfu

[env:Halcyon_v1_stlink]
extends              = env:Halcyon_v1
upload_protocol      = stlink

[env:f446re_flexi_cnc]
board = genericSTM32F446RE
; change microcontroller
board_build.mcu = stm32f446ret6
board_build.ldscript = FLEXI_STM32F446RETX_BL_FLASH.ld
build_flags = ${common.build_flags}
  -D USB_SERIAL_CDC=1
  -D BOARD_FLEXI_HAL=1
  -D HAS_BOOTLOADER=1
  -D UF2_BOOTLOADER=1  
  -D HSE_VALUE=25000000
  -D NVS_SIZE=16384
#  -D FTP_ENABLE=1
#  -D MDNS_ENABLE=0
#  -D SSDP_ENABLE=0
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}
extra_scripts = 
    post:flexi_script.py
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
upload_protocol = stlink
